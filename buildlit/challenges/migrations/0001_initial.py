# Generated by Django 5.2.5 on 2025-08-06 20:04

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BuilderChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "min_buildathon_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Minimum score required to apply for this challenge",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeApplicant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeJudging",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_finalized", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(help_text="Problem description")),
                ("input_format", models.TextField(blank=True, null=True)),
                ("output_format", models.TextField(blank=True, null=True)),
                ("sample_input", models.TextField(blank=True, null=True)),
                ("sample_output", models.TextField(blank=True, null=True)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="medium",
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submitted_code", models.TextField()),
                (
                    "language",
                    models.CharField(
                        help_text="Programming language used", max_length=50
                    ),
                ),
                ("score", models.FloatField(default=0.0)),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeTestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_data", models.TextField()),
                ("expected_output", models.TextField()),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Show this test case to user (like sample test)",
                    ),
                ),
            ],
        ),
    ]
