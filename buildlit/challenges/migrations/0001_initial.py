# Generated by Django 5.2.3 on 2025-08-03 06:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("buildathon", "0001_initial"),
        ("profiles", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BuilderChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "min_buildathon_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Minimum score required to apply for this challenge",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_challenges",
                        to="profiles.profile",
                    ),
                ),
                (
                    "required_skills",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Skills required for this challenge",
                        related_name="builder_challenges",
                        to="profiles.skills",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeApplicant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "applicant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="profiles.profile",
                    ),
                ),
                (
                    "buildathon_credentials",
                    models.ManyToManyField(
                        help_text="Buildathon wins that qualify this application",
                        to="buildathon.buildathonwinner",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenges.builderchallenge",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(help_text="Problem description")),
                ("input_format", models.TextField(blank=True, null=True)),
                ("output_format", models.TextField(blank=True, null=True)),
                ("sample_input", models.TextField(blank=True, null=True)),
                ("sample_output", models.TextField(blank=True, null=True)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="medium",
                        max_length=50,
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="challenges.builderchallenge",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submitted_code", models.TextField()),
                (
                    "language",
                    models.CharField(
                        help_text="Programming language used", max_length=50
                    ),
                ),
                ("score", models.FloatField(default=0.0)),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="challenges.challengeapplicant",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenges.challengequestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeTestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input_data", models.TextField()),
                ("expected_output", models.TextField()),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Show this test case to user (like sample test)",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_cases",
                        to="challenges.challengequestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChallengeJudging",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_finalized", models.BooleanField(default=False)),
                (
                    "judge",
                    models.ForeignKey(
                        limit_choices_to={"role": "builder"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_judged_by",
                        to="profiles.profile",
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_judged_submissions",
                        to="profiles.profile",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="judgings",
                        to="challenges.challengesubmission",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission", "judge")},
            },
        ),
    ]
